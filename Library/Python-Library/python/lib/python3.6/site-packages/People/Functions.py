import json
from googleapiclient.discovery import build
from google.oauth2.credentials import Credentials
from Credentials.Functions import Creds

# Global Variables
PeopleScopes = ["https://www.googleapis.com/auth/contacts","https://www.googleapis.com/auth/contacts.readonly"]
 
# Google People API - Basic Functions (Create, Retrieve, Update, Delete, Get)
class Requests:
    def __init__(self, body, creds):
        self.event = body
        self.cred = creds

    def Create(self):
        info = Creds(self.cred)
        if(info.ScopeCheck(PeopleScopes[0])):
            credinfo = info.CredFormat()
            try:
                service = build('people', 'v1', credentials=credinfo, cache_discovery=False)
                result = service.people().createContact(body=self.event['body']).execute()
            except Exception as err:
                return {
                    'statusCode': 400,
                    'statusDesc': 'Bad Request',
                    'desc': 'Credential File Error / Input Format Incorrect / Server Handling Error.',
                    'body': err
                }
            else:        
                return {
                    'statusCode': 200,
                    'statusDesc': 'OK',
                    'desc': 'Contact Created Successfully.'
                }
        else:
            return {
                'statusCode': 401,
                'statusDesc': 'Unauthorized',
                'desc': 'Insufficient Scope or Required Scope Missing.'
            }

    def Retrieve(self):
        info = Creds(self.cred)
        if(info.ScopeCheck(PeopleScopes[0]) or info.ScopeCheck(PeopleScopes[1])):
            credinfo = info.CredFormat()
            try:
                service = build('people', 'v1', credentials=credinfo, cache_discovery=False)
                result = service.people().connections().list(resourceName=event['contactid'],pageSize=event['totalresults'],sortOrder=event['sort'],personFields=event['fields']).execute()
            except Exception as err:
                return {
                    'statusCode': 400,
                    'statusDesc': 'Bad Request',
                    'desc': 'Credential File Error / Input Format Incorrect / Server Handling Error.',
                    'body': err
                }
            else:
                connections = result.get('connections', [])
                qdat = event.get('qname')
                if (qdat is None or event['qname'] == "") :
                    return {
                    'statusCode': 200,
                    'statusDesc': 'OK',
                    'desc': 'Contacts Retrieved Successfully.',
                    'body': connections
                    }
                elif (event['qname'] != ""):
                    count = 0
                    resdict = {}
                    for person in connections:
                        names = person.get('names', [])
                        if names[0].get('givenName') == event['qname']:
                            count+=1
                            resdict.update({"id":count,"data":person})
                    if (count > 0):
                        return {
                            'statusCode': 200,
                            'statusDesc': 'OK',
                            'desc': 'Contacts Queried Successfully.',
                            'Query': {
                                "ResultCount": count,
                                "Result": resdict
                            } 
                        }
                    else :
                        return {
                            'statusCode': 404,
                            'statusDesc': 'Resource Not Found',
                            'desc': 'No Match Found.'
                        }
        else:
            return {
                'statusCode': 401,
                'statusDesc': 'Unauthorized',
                'desc': 'Insufficient Scope or Required Scope Missing.'
            }

    def Update(self):
        info = Creds(self.cred)
        if(info.ScopeCheck(PeopleScopes[0])):
            credinfo = info.CredFormat()
            try:
                service = build('people', 'v1', credentials=credinfo, cache_discovery=False)
                result = service.people().updateContact(resourceName=self.event['contactid'],updatePersonFields=self.event['fields'],body=self.event['body']).execute()
            except Exception as err:
                return {
                    'statusCode': 400,
                    'statusDesc': 'Bad Request',
                    'desc': 'Credential File Error / Input Format Incorrect / Server Handling Error.',
                    'body': err
                }
            else:
                return {
                'statusCode': 200,
                'statusDesc': 'OK',
                'desc': 'Contact Updated Successfully.'
                }
        else:
            return {
                'statusCode': 401,
                'statusDesc': 'Unauthorized',
                'desc': 'Insufficient Scope or Required Scope Missing.'
            }
    
    def Delete(self):
        info = Creds(self.cred)
        if(info.ScopeCheck(PeopleScopes[0])):
            credinfo = info.CredFormat()
            try:
                service = build('people', 'v1', credentials=credinfo, cache_discovery=False)
                result = service.people().deleteContact(resourceName = self.event['contactid']).execute()
            except Exception as err:
                return {
                    'statusCode': 400,
                    'statusDesc': 'Bad Request',
                    'desc': 'Credential File Error / Input Format Incorrect / Server Handling Error.',
                    'body': err
                }
            else:
                return {
                'statusCode': 200,
                'statusDesc': 'OK',
                'desc': 'Contact Deleted Successfully.'
                }
        else:
            return {
                'statusCode': 401,
                'statusDesc': 'Unauthorized',
                'desc': 'Insufficient Scope or Required Scope Missing.'
            }

    def Get(self):
        info = Creds(self.cred)
        if(info.ScopeCheck(PeopleScopes[0]) or info.ScopeCheck(PeopleScopes[1])):
            credinfo = info.CredFormat()
            try:
                service = build('people', 'v1', credentials=credinfo, cache_discovery=False)
                result = service.people().get(resourceName=event['contactid'],personFields=event['fields']).execute()
            except Exception as err:
                return {
                    'statusCode': 400,
                    'statusDesc': 'Bad Request',
                    'desc': 'Credential File Error / Input Format Incorrect / Server Handling Error.',
                    'body': err
                }
            else:
                return {
                    'statusCode': 200,
                    'desc': 'Contact Data Retrieved Successfully',
                    'body': result
                }
        else:
            return {
                'statusCode': 401,
                'statusDesc': 'Unauthorized',
                'desc': 'Insufficient Scope or Required Scope Missing.'
            }